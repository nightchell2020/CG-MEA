
******************************    Configurations for Train    ******************************

{'EKG': 'O',
 '_ssl_target_': 'models.ssl.byol.BYOL',
 '_target_': 'models.vit.vit_b_8',
 'activation': 'gelu',
 'age_mean': tensor([71.1771]),
 'age_std': tensor([9.6289]),
 'attention_dropout': 0.1,
 'awgn': 0.05,
 'awgn_age': 0.001,
 'base_lr': 0.05,
 'channel_dropout': 0.1,
 'class_label_to_name': ['Normal', 'MCI', 'Dementia'],
 'class_name_to_label': {'Dementia': 2, 'MCI': 1, 'Normal': 0},
 'clip_grad_norm': 1.0,
 'criterion': 'cross-entropy',
 'crop_multiple': 2,
 'crop_timing_analysis': False,
 'cwd': '/home/imkbsz/workspace/eeg_analysis',
 'dataset_name': 'CAUEEG dataset',
 'dataset_path': 'local/dataset/caueeg-dataset/',
 'ddp': True,
 'ddp_size': 4,
 'device': device(type='cuda', index=0),
 'draw_result': True,
 'dropout': 0.1,
 'embedding_layer': 2,
 'fc_stages': 2,
 'file_format': 'memmap',
 'in_channels': 40,
 'input_norm': 'datapoint',
 'latency': 2000,
 'load_event': False,
 'lr_scheduler_type': 'cosine_decay_with_warmup_half',
 'mgn': 0.05,
 'minibatch': 192,
 'minibatch_3090': 192,
 'mixed_precision': True,
 'mixup': 0.0,
 'mlp_hidden_size': 4096,
 'model': '2D-ViT-B-8',
 'multi_batch_size': 24,
 'num_history': 500,
 'num_params': 90738435,
 'out_dims': 3,
 'output_length': 82,
 'photic': 'X',
 'preprocess_test': Sequential(
  (0): EegToDevice(device=device(type='cuda', index=0))
  (1): EegNormalizeAge(mean=tensor([71.1771]), std=tensor([9.6289]), eps=1e-08, std_eps=tensor([9.6289]))
  (2): EegNormalizePerSignal(eps=1e-08)
  (3): EegSpectrogram(n_fft=219, complex_mode='as_real', stft_kwargs={'hop_length': 55})
  (4): EegNormalizePerSignal(eps=1e-08)
),
 'preprocess_train': Sequential(
  (0): EegToDevice(device=device(type='cuda', index=0))
  (1): EegNormalizeAge(mean=tensor([71.1771], device='cuda:0'), std=tensor([9.6289]), eps=1e-08, std_eps=tensor([9.6289], device='cuda:0'))
  (2): EegAddGaussianNoiseAge(mean=0.0, std=0.001)
  (3): EegNormalizePerSignal(eps=1e-08)
  (4): EegChannelDropOut(p=0.1)
  (5): EegMultiplicativeGaussianNoise(mean=0.0, std=0.05)
  (6): EegAdditiveGaussianNoise(mean=0.0, std=0.05)
  (7): EegSpectrogram(n_fft=219, complex_mode='as_real', stft_kwargs={'hop_length': 55})
  (8): EegNormalizePerSignal(eps=1e-08)
),
 'project': 'caueeg-ssl',
 'projection_size': 256,
 'run_mode': 'train',
 'save_model': True,
 'search_lr': False,
 'search_multiplier': 1.0,
 'seed': 0,
 'seq_len_2d': (110, 110),
 'seq_length': 6000,
 'signal_header': ['Fp1-AVG',
                   'F3-AVG',
                   'C3-AVG',
                   'P3-AVG',
                   'O1-AVG',
                   'Fp2-AVG',
                   'F4-AVG',
                   'C4-AVG',
                   'P4-AVG',
                   'O2-AVG',
                   'F7-AVG',
                   'T3-AVG',
                   'T5-AVG',
                   'F8-AVG',
                   'T4-AVG',
                   'T6-AVG',
                   'FZ-AVG',
                   'CZ-AVG',
                   'PZ-AVG',
                   'EKG',
                   'Photic'],
 'signal_length_limit': 10000000,
 'stft_params': {'hop_length': 55, 'n_fft': 219},
 'target_ema': 0.99,
 'task': 'dementia',
 'task_description': 'Classification of [Normal], [MCI], and [Dementia] symptoms.',
 'task_name': 'CAUEEG-Dementia benchmark',
 'test_crop_multiple': 8,
 'total_samples': 300000000.0,
 'transform': Compose(
    EegRandomCrop(crop_length=6000, length_limit=10000000, multiple=2, latency=2000, segment_simulation=False, return_timing=False, reject_events=False)
    EegDropChannels(drop_index=[20])
    EegToTensor()
),
 'transform_multicrop': Compose(
    EegRandomCrop(crop_length=6000, length_limit=10000000, multiple=8, latency=2000, segment_simulation=False, return_timing=False, reject_events=False)
    EegDropChannels(drop_index=[20])
    EegToTensor()
),
 'use_age': 'conv',
 'use_wandb': False,
 'warmup_min': 3000,
 'warmup_ratio': 0.05,
 'watch_model': False,
 'weight_decay': 0.01}

********************************************************************************************

Error executing job with overrides: ['ssl=byol', 'data=caueeg-dementia', 'train=ddp-amp-gradclip', '+train.project=caueeg-ssl', 'model=2D-ViT-B-8', '++data.seq_length=6000', '++data.input_norm=datapoint', '++data.awgn=0.05', '++data.mgn=0.05', '++data.channel_dropout=0.1', '++data.crop_multiple=2', '++train.lr_scheduler_type=cosine_decay_with_warmup_half', '++train.search_lr=False', '++train.base_lr=0.05', '++train.use_wandb=False']
Traceback (most recent call last):
  File "/home/imkbsz/workspace/eeg_analysis/run_ssl_train.py", line 97, in my_app
    mp.spawn(prepare_and_run_ssl_train,
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 240, in spawn
    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 198, in start_processes
    while not context.join():
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 160, in join
    raise ProcessRaisedException(msg, error_index, failed_process.pid)
torch.multiprocessing.spawn.ProcessRaisedException: 

-- Process 0 terminated with the following error:
Traceback (most recent call last):
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 69, in _wrap
    fn(i, *args)
  File "/home/imkbsz/workspace/eeg_analysis/run_ssl_train.py", line 77, in prepare_and_run_ssl_train
    ssl_train_script(config, model, train_loader, config['preprocess_train'])
  File "/home/imkbsz/workspace/eeg_analysis/train/ssl_train_script.py", line 143, in ssl_train_script
    loss = ssl_train_multistep(model=model, loader=loader, preprocess=preprocess,
  File "/home/imkbsz/workspace/eeg_analysis/train/train_core.py", line 140, in ssl_train_multistep
    post_update_params = model.post_update_params
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1185, in __getattr__
    raise AttributeError("'{}' object has no attribute '{}'".format(
AttributeError: 'DistributedDataParallel' object has no attribute 'post_update_params'


Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.

******************************    Configurations for Train    ******************************

{'EKG': 'O',
 '_ssl_target_': 'models.ssl.byol.BYOL',
 '_target_': 'models.vit.vit_b_8',
 'activation': 'gelu',
 'age_mean': tensor([71.1771]),
 'age_std': tensor([9.6289]),
 'attention_dropout': 0.1,
 'awgn': 0.05,
 'awgn_age': 0.001,
 'base_lr': 0.05,
 'channel_dropout': 0.1,
 'class_label_to_name': ['Normal', 'MCI', 'Dementia'],
 'class_name_to_label': {'Dementia': 2, 'MCI': 1, 'Normal': 0},
 'clip_grad_norm': 1.0,
 'criterion': 'cross-entropy',
 'crop_multiple': 2,
 'crop_timing_analysis': False,
 'cwd': '/home/imkbsz/workspace/eeg_analysis',
 'dataset_name': 'CAUEEG dataset',
 'dataset_path': 'local/dataset/caueeg-dataset/',
 'ddp': True,
 'ddp_size': 4,
 'device': device(type='cuda', index=0),
 'draw_result': True,
 'dropout': 0.1,
 'embedding_layer': 2,
 'fc_stages': 2,
 'file_format': 'memmap',
 'in_channels': 40,
 'input_norm': 'datapoint',
 'latency': 2000,
 'load_event': False,
 'lr_scheduler_type': 'cosine_decay_with_warmup_half',
 'mgn': 0.05,
 'minibatch': 192,
 'minibatch_3090': 192,
 'mixed_precision': True,
 'mixup': 0.0,
 'mlp_hidden_size': 4096,
 'model': '2D-ViT-B-8',
 'multi_batch_size': 24,
 'num_history': 500,
 'num_params': 90738435,
 'out_dims': 3,
 'output_length': 82,
 'photic': 'X',
 'preprocess_test': Sequential(
  (0): EegToDevice(device=device(type='cuda', index=0))
  (1): EegNormalizeAge(mean=tensor([71.1771]), std=tensor([9.6289]), eps=1e-08, std_eps=tensor([9.6289]))
  (2): EegNormalizePerSignal(eps=1e-08)
  (3): EegSpectrogram(n_fft=219, complex_mode='as_real', stft_kwargs={'hop_length': 55})
  (4): EegNormalizePerSignal(eps=1e-08)
),
 'preprocess_train': Sequential(
  (0): EegToDevice(device=device(type='cuda', index=0))
  (1): EegNormalizeAge(mean=tensor([71.1771], device='cuda:0'), std=tensor([9.6289]), eps=1e-08, std_eps=tensor([9.6289], device='cuda:0'))
  (2): EegAddGaussianNoiseAge(mean=0.0, std=0.001)
  (3): EegNormalizePerSignal(eps=1e-08)
  (4): EegChannelDropOut(p=0.1)
  (5): EegMultiplicativeGaussianNoise(mean=0.0, std=0.05)
  (6): EegAdditiveGaussianNoise(mean=0.0, std=0.05)
  (7): EegSpectrogram(n_fft=219, complex_mode='as_real', stft_kwargs={'hop_length': 55})
  (8): EegNormalizePerSignal(eps=1e-08)
),
 'project': 'caueeg-ssl',
 'projection_size': 256,
 'run_mode': 'train',
 'save_model': True,
 'search_lr': False,
 'search_multiplier': 1.0,
 'seed': 0,
 'seq_len_2d': (110, 110),
 'seq_length': 6000,
 'signal_header': ['Fp1-AVG',
                   'F3-AVG',
                   'C3-AVG',
                   'P3-AVG',
                   'O1-AVG',
                   'Fp2-AVG',
                   'F4-AVG',
                   'C4-AVG',
                   'P4-AVG',
                   'O2-AVG',
                   'F7-AVG',
                   'T3-AVG',
                   'T5-AVG',
                   'F8-AVG',
                   'T4-AVG',
                   'T6-AVG',
                   'FZ-AVG',
                   'CZ-AVG',
                   'PZ-AVG',
                   'EKG',
                   'Photic'],
 'signal_length_limit': 10000000,
 'stft_params': {'hop_length': 55, 'n_fft': 219},
 'target_ema': 0.99,
 'task': 'dementia',
 'task_description': 'Classification of [Normal], [MCI], and [Dementia] symptoms.',
 'task_name': 'CAUEEG-Dementia benchmark',
 'test_crop_multiple': 8,
 'total_samples': 300000000.0,
 'transform': Compose(
    EegRandomCrop(crop_length=6000, length_limit=10000000, multiple=2, latency=2000, segment_simulation=False, return_timing=False, reject_events=False)
    EegDropChannels(drop_index=[20])
    EegToTensor()
),
 'transform_multicrop': Compose(
    EegRandomCrop(crop_length=6000, length_limit=10000000, multiple=8, latency=2000, segment_simulation=False, return_timing=False, reject_events=False)
    EegDropChannels(drop_index=[20])
    EegToTensor()
),
 'use_age': 'conv',
 'use_wandb': False,
 'warmup_min': 3000,
 'warmup_ratio': 0.05,
 'watch_model': False,
 'weight_decay': 0.01}

********************************************************************************************

Error executing job with overrides: ['ssl=byol', 'data=caueeg-dementia', 'train=ddp-amp-gradclip', '+train.project=caueeg-ssl', 'model=2D-ViT-B-8', '++data.seq_length=6000', '++data.input_norm=datapoint', '++data.awgn=0.05', '++data.mgn=0.05', '++data.channel_dropout=0.1', '++data.crop_multiple=2', '++train.lr_scheduler_type=cosine_decay_with_warmup_half', '++train.search_lr=False', '++train.base_lr=0.05', '++train.use_wandb=False']
Traceback (most recent call last):
  File "/home/imkbsz/workspace/eeg_analysis/run_ssl_train.py", line 97, in my_app
    mp.spawn(prepare_and_run_ssl_train,
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 240, in spawn
    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 198, in start_processes
    while not context.join():
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 160, in join
    raise ProcessRaisedException(msg, error_index, failed_process.pid)
torch.multiprocessing.spawn.ProcessRaisedException: 

-- Process 3 terminated with the following error:
Traceback (most recent call last):
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 69, in _wrap
    fn(i, *args)
  File "/home/imkbsz/workspace/eeg_analysis/run_ssl_train.py", line 77, in prepare_and_run_ssl_train
    ssl_train_script(config, model, train_loader, config['preprocess_train'])
  File "/home/imkbsz/workspace/eeg_analysis/train/ssl_train_script.py", line 143, in ssl_train_script
    loss = ssl_train_multistep(model=model, loader=loader, preprocess=preprocess,
  File "/home/imkbsz/workspace/eeg_analysis/train/train_core.py", line 162, in ssl_train_multistep
    amp_scaler.step(optimizer)
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 947, in forward
    if torch.is_grad_enabled() and self.reducer._rebuild_buckets():
RuntimeError: Expected to have finished reduction in the prior iteration before starting a new one. This error indicates that your module has parameters that were not used in producing loss. You can enable unused parameter detection by passing the keyword argument `find_unused_parameters=True` to `torch.nn.parallel.DistributedDataParallel`, and by 
making sure all `forward` function outputs participate in calculating loss. 
If you already have done the above, then the distributed data parallel module wasn't able to locate the output tensors in the return value of your module's `forward` function. Please include the loss function and the structure of the return value of `forward` of your module when reporting this issue (e.g. list, dict, iterable).
Parameter indices which did not receive grad for rank 3: 150 151 152 153
 In addition, you can set the environment variable TORCH_DISTRIBUTED_DEBUG to either INFO or DETAIL to print out information about which particular parameters did not receive gradient on this rank as part of this error


Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
Error executing job with overrides: ['ssl=byol', 'data=caueeg-dementia', 'train=ddp-amp-gradclip', '+train.project=caueeg-ssl', 'model=2D-ViT-B-8', '++data.seq_length=6000', '++data.input_norm=datapoint', '++data.awgn=0.05', '++data.mgn=0.05', '++data.channel_dropout=0.1', '++data.crop_multiple=2', '++train.lr_scheduler_type=cosine_decay_with_warmup_half', '++train.search_lr=False', '++train.base_lr=0.05', '++train.use_wandb=False']
Traceback (most recent call last):
  File "/home/imkbsz/workspace/eeg_analysis/run_ssl_train.py", line 97, in my_app
    mp.spawn(prepare_and_run_ssl_train,
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 240, in spawn
    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 198, in start_processes
    while not context.join():
  File "/home/imkbsz/anaconda3/envs/eeg/lib/python3.9/site-packages/torch/multiprocessing/spawn.py", line 140, in join
    raise ProcessExitedException(
torch.multiprocessing.spawn.ProcessExitedException: process 0 terminated with signal SIGKILL

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.

******************************    Configurations for Train    ******************************

{'EKG': 'O',
 '_target_': 'models.conformer.ConformerClassifier',
 'age_mean': tensor([71.2282]),
 'age_std': tensor([9.8162]),
 'awgn': 0.001,
 'awgn_age': 0.001,
 'base_lr': 0.0001,
 'class_label_to_name': ['Normal', 'Abnormal'],
 'class_name_to_label': {'Abnormal': 1, 'Normal': 0},
 'criterion': 'cross-entropy',
 'crop_multiple': 4,
 'crop_timing_analysis': False,
 'cwd': '/home/imkbsz/workspace/eeg_analysis',
 'dataset_name': 'CAUEEG dataset',
 'dataset_path': 'local/dataset/caueeg-dataset/',
 'ddp': False,
 'device': device(type='cuda'),
 'draw_result': True,
 'dropout': 0.1,
 'encoder_dim': 512,
 'fc_stages': 3,
 'file_format': 'memmap',
 'in_channels': 40,
 'input_norm': 'dataset',
 'latency': 2000,
 'load_event': False,
 'lr_scheduler_type': 'constant_with_decay',
 'mgn': 0.001,
 'minibatch': 384,
 'minibatch_3090': 384,
 'mixup': 0.0,
 'model': '2D-Conformer-9-512',
 'multi_batch_size': 48,
 'num_history': 500,
 'num_layers': 9,
 'num_params': 81328066,
 'out_dims': 2,
 'output_length': 11,
 'photic': 'X',
 'preprocess_test': Sequential(
  (0): EegToDevice(device=device(type='cuda'))
  (1): EegNormalizeAge(mean=tensor([71.2282]), std=tensor([9.8162]), eps=1e-08, std_eps=tensor([9.8162]))
  (2): EegNormalizeMeanStd(mean=tensor([[[-0.0830],
           [ 0.0064],
           [-0.0012],
           [-0.0161],
           [-0.0163],
           [-0.0752],
           [ 0.0113],
           [-0.0003],
           [-0.0190],
           [ 0.0154],
           [-0.0089],
           [ 0.0195],
           [-0.0072],
           [ 0.0141],
           [ 0.0190],
           [ 0.0152],
           [-0.0016],
           [-0.0024],
           [-0.0080],
           [ 0.0006]]]), std=tensor([[[53.0120],
           [22.2482],
           [12.9257],
           [13.2102],
           [17.5904],
           [57.4011],
           [22.2153],
           [11.7503],
           [13.1706],
           [17.6153],
           [22.8162],
           [15.4861],
           [15.1812],
           [23.5922],
           [19.2991],
           [16.5288],
           [21.0155],
           [12.4146],
           [12.7778],
           [97.4292]]]), eps=1e-08, std_eps=tensor([[[53.0120],
           [22.2482],
           [12.9257],
           [13.2102],
           [17.5904],
           [57.4011],
           [22.2153],
           [11.7503],
           [13.1706],
           [17.6153],
           [22.8162],
           [15.4861],
           [15.1812],
           [23.5922],
           [19.2991],
           [16.5288],
           [21.0155],
           [12.4146],
           [12.7778],
           [97.4292]]]))
  (3): EegSpectrogram(n_fft=500, complex_mode='as_real', stft_kwargs={'hop_length': 125})
  (4): EegNormalizeMeanStd(mean=tensor([[[[ 8.2041e-01],
            [ 2.4567e-02],
            [ 2.2120e-02],
            ...,
            [-6.9043e-05],
            [-6.6450e-05],
            [-7.4228e-05]],
  
           [[ 6.4742e-02],
            [ 8.9049e-03],
            [ 2.1429e-02],
            ...,
            [-1.0181e-03],
            [-2.8754e-04],
            [-2.8860e-04]],
  
           [[ 1.8831e-01],
            [ 1.2219e-02],
            [-7.5264e-04],
            ...,
            [ 4.1907e-04],
            [ 2.1248e-04],
            [ 1.9661e-04]],
  
           ...,
  
           [[ 0.0000e+00],
            [ 1.0452e-02],
            [-1.5915e-03],
            ...,
            [-2.1343e-04],
            [ 1.2698e-05],
            [ 0.0000e+00]],
  
           [[ 0.0000e+00],
            [ 4.2940e-02],
            [ 9.3726e-03],
            ...,
            [-9.4188e-04],
            [-2.3531e-05],
            [ 0.0000e+00]],
  
           [[ 0.0000e+00],
            [-3.6421e-03],
            [-9.4252e-04],
            ...,
            [ 3.3312e-06],
            [ 4.8425e-05],
            [ 0.0000e+00]]]], device='cuda:0'), std=tensor([[[[2.9739e+02],
            [1.2340e+02],
            [6.2207e+01],
            ...,
            [7.6042e-01],
            [7.6094e-01],
            [7.7061e-01]],
  
           [[2.9716e+02],
            [1.1564e+02],
            [5.4388e+01],
            ...,
            [7.9569e-01],
            [7.9692e-01],
            [8.3617e-01]],
  
           [[2.8645e+02],
            [1.0055e+02],
            [4.5235e+01],
            ...,
            [8.5583e-01],
            [8.5994e-01],
            [9.5802e-01]],
  
           ...,
  
           [[0.0000e+00],
            [1.3978e+02],
            [6.8471e+01],
            ...,
            [3.4146e-01],
            [3.6642e-01],
            [0.0000e+00]],
  
           [[0.0000e+00],
            [1.4765e+02],
            [7.2073e+01],
            ...,
            [3.3306e-01],
            [3.5697e-01],
            [0.0000e+00]],
  
           [[0.0000e+00],
            [1.1785e+01],
            [2.5675e+01],
            ...,
            [4.9747e-02],
            [6.5179e-02],
            [0.0000e+00]]]], device='cuda:0'), eps=1e-08, std_eps=tensor([[[[2.9739e+02],
            [1.2340e+02],
            [6.2207e+01],
            ...,
            [7.6042e-01],
            [7.6094e-01],
            [7.7061e-01]],
  
           [[2.9716e+02],
            [1.1564e+02],
            [5.4388e+01],
            ...,
            [7.9569e-01],
            [7.9692e-01],
            [8.3617e-01]],
  
           [[2.8645e+02],
            [1.0055e+02],
            [4.5235e+01],
            ...,
            [8.5583e-01],
            [8.5994e-01],
            [9.5802e-01]],
  
           ...,
  
           [[1.0000e-08],
            [1.3978e+02],
            [6.8471e+01],
            ...,
            [3.4146e-01],
            [3.6642e-01],
            [1.0000e-08]],
  
           [[1.0000e-08],
            [1.4765e+02],
            [7.2073e+01],
            ...,
            [3.3306e-01],
            [3.5697e-01],
            [1.0000e-08]],
  
           [[1.0000e-08],
            [1.1785e+01],
            [2.5675e+01],
            ...,
            [4.9747e-02],
            [6.5179e-02],
            [1.0000e-08]]]], device='cuda:0'))
),
 'preprocess_train': Sequential(
  (0): EegToDevice(device=device(type='cuda'))
  (1): EegNormalizeAge(mean=tensor([71.2282], device='cuda:0'), std=tensor([9.8162]), eps=1e-08, std_eps=tensor([9.8162], device='cuda:0'))
  (2): EegAddGaussianNoiseAge(mean=0.0, std=0.001)
  (3): EegNormalizeMeanStd(mean=tensor([[[-0.0830],
           [ 0.0064],
           [-0.0012],
           [-0.0161],
           [-0.0163],
           [-0.0752],
           [ 0.0113],
           [-0.0003],
           [-0.0190],
           [ 0.0154],
           [-0.0089],
           [ 0.0195],
           [-0.0072],
           [ 0.0141],
           [ 0.0190],
           [ 0.0152],
           [-0.0016],
           [-0.0024],
           [-0.0080],
           [ 0.0006]]], device='cuda:0'), std=tensor([[[53.0120],
           [22.2482],
           [12.9257],
           [13.2102],
           [17.5904],
           [57.4011],
           [22.2153],
           [11.7503],
           [13.1706],
           [17.6153],
           [22.8162],
           [15.4861],
           [15.1812],
           [23.5922],
           [19.2991],
           [16.5288],
           [21.0155],
           [12.4146],
           [12.7778],
           [97.4292]]]), eps=1e-08, std_eps=tensor([[[53.0120],
           [22.2482],
           [12.9257],
           [13.2102],
           [17.5904],
           [57.4011],
           [22.2153],
           [11.7503],
           [13.1706],
           [17.6153],
           [22.8162],
           [15.4861],
           [15.1812],
           [23.5922],
           [19.2991],
           [16.5288],
           [21.0155],
           [12.4146],
           [12.7778],
           [97.4292]]], device='cuda:0'))
  (4): EegMultiplicativeGaussianNoise(mean=0.0, std=0.001)
  (5): EegAdditiveGaussianNoise(mean=0.0, std=0.001)
  (6): EegSpectrogram(n_fft=500, complex_mode='as_real', stft_kwargs={'hop_length': 125})
  (7): EegNormalizeMeanStd(mean=tensor([[[[ 8.2041e-01],
            [ 2.4567e-02],
            [ 2.2120e-02],
            ...,
            [-6.9043e-05],
            [-6.6450e-05],
            [-7.4228e-05]],
  
           [[ 6.4742e-02],
            [ 8.9049e-03],
            [ 2.1429e-02],
            ...,
            [-1.0181e-03],
            [-2.8754e-04],
            [-2.8860e-04]],
  
           [[ 1.8831e-01],
            [ 1.2219e-02],
            [-7.5264e-04],
            ...,
            [ 4.1907e-04],
            [ 2.1248e-04],
            [ 1.9661e-04]],
  
           ...,
  
           [[ 0.0000e+00],
            [ 1.0452e-02],
            [-1.5915e-03],
            ...,
            [-2.1343e-04],
            [ 1.2698e-05],
            [ 0.0000e+00]],
  
           [[ 0.0000e+00],
            [ 4.2940e-02],
            [ 9.3726e-03],
            ...,
            [-9.4188e-04],
            [-2.3531e-05],
            [ 0.0000e+00]],
  
           [[ 0.0000e+00],
            [-3.6421e-03],
            [-9.4252e-04],
            ...,
            [ 3.3312e-06],
            [ 4.8425e-05],
            [ 0.0000e+00]]]], device='cuda:0'), std=tensor([[[[2.9739e+02],
            [1.2340e+02],
            [6.2207e+01],
            ...,
            [7.6042e-01],
            [7.6094e-01],
            [7.7061e-01]],
  
           [[2.9716e+02],
            [1.1564e+02],
            [5.4388e+01],
            ...,
            [7.9569e-01],
            [7.9692e-01],
            [8.3617e-01]],
  
           [[2.8645e+02],
            [1.0055e+02],
            [4.5235e+01],
            ...,
            [8.5583e-01],
            [8.5994e-01],
            [9.5802e-01]],
  
           ...,
  
           [[0.0000e+00],
            [1.3978e+02],
            [6.8471e+01],
            ...,
            [3.4146e-01],
            [3.6642e-01],
            [0.0000e+00]],
  
           [[0.0000e+00],
            [1.4765e+02],
            [7.2073e+01],
            ...,
            [3.3306e-01],
            [3.5697e-01],
            [0.0000e+00]],
  
           [[0.0000e+00],
            [1.1785e+01],
            [2.5675e+01],
            ...,
            [4.9747e-02],
            [6.5179e-02],
            [0.0000e+00]]]], device='cuda:0'), eps=1e-08, std_eps=tensor([[[[2.9739e+02],
            [1.2340e+02],
            [6.2207e+01],
            ...,
            [7.6042e-01],
            [7.6094e-01],
            [7.7061e-01]],
  
           [[2.9716e+02],
            [1.1564e+02],
            [5.4388e+01],
            ...,
            [7.9569e-01],
            [7.9692e-01],
            [8.3617e-01]],
  
           [[2.8645e+02],
            [1.0055e+02],
            [4.5235e+01],
            ...,
            [8.5583e-01],
            [8.5994e-01],
            [9.5802e-01]],
  
           ...,
  
           [[1.0000e-08],
            [1.3978e+02],
            [6.8471e+01],
            ...,
            [3.4146e-01],
            [3.6642e-01],
            [1.0000e-08]],
  
           [[1.0000e-08],
            [1.4765e+02],
            [7.2073e+01],
            ...,
            [3.3306e-01],
            [3.5697e-01],
            [1.0000e-08]],
  
           [[1.0000e-08],
            [1.1785e+01],
            [2.5675e+01],
            ...,
            [4.9747e-02],
            [6.5179e-02],
            [1.0000e-08]]]], device='cuda:0'))
),
 'project': 'noname',
 'run_mode': 'train',
 'save_model': True,
 'search_lr': True,
 'search_multiplier': 1.0,
 'seed': 0,
 'seq_len_2d': (251, 49),
 'seq_length': 6000,
 'signal_2d_mean': tensor([[[[ 8.2041e-01],
          [ 2.4567e-02],
          [ 2.2120e-02],
          ...,
          [-6.9043e-05],
          [-6.6450e-05],
          [-7.4228e-05]],

         [[ 6.4742e-02],
          [ 8.9049e-03],
          [ 2.1429e-02],
          ...,
          [-1.0181e-03],
          [-2.8754e-04],
          [-2.8860e-04]],

         [[ 1.8831e-01],
          [ 1.2219e-02],
          [-7.5264e-04],
          ...,
          [ 4.1907e-04],
          [ 2.1248e-04],
          [ 1.9661e-04]],

         ...,

         [[ 0.0000e+00],
          [ 1.0452e-02],
          [-1.5915e-03],
          ...,
          [-2.1343e-04],
          [ 1.2698e-05],
          [ 0.0000e+00]],

         [[ 0.0000e+00],
          [ 4.2940e-02],
          [ 9.3726e-03],
          ...,
          [-9.4188e-04],
          [-2.3531e-05],
          [ 0.0000e+00]],

         [[ 0.0000e+00],
          [-3.6421e-03],
          [-9.4252e-04],
          ...,
          [ 3.3312e-06],
          [ 4.8425e-05],
          [ 0.0000e+00]]]], device='cuda:0'),
 'signal_2d_std': tensor([[[[2.9739e+02],
          [1.2340e+02],
          [6.2207e+01],
          ...,
          [7.6042e-01],
          [7.6094e-01],
          [7.7061e-01]],

         [[2.9716e+02],
          [1.1564e+02],
          [5.4388e+01],
          ...,
          [7.9569e-01],
          [7.9692e-01],
          [8.3617e-01]],

         [[2.8645e+02],
          [1.0055e+02],
          [4.5235e+01],
          ...,
          [8.5583e-01],
          [8.5994e-01],
          [9.5802e-01]],

         ...,

         [[0.0000e+00],
          [1.3978e+02],
          [6.8471e+01],
          ...,
          [3.4146e-01],
          [3.6642e-01],
          [0.0000e+00]],

         [[0.0000e+00],
          [1.4765e+02],
          [7.2073e+01],
          ...,
          [3.3306e-01],
          [3.5697e-01],
          [0.0000e+00]],

         [[0.0000e+00],
          [1.1785e+01],
          [2.5675e+01],
          ...,
          [4.9747e-02],
          [6.5179e-02],
          [0.0000e+00]]]], device='cuda:0'),
 'signal_header': ['Fp1-AVG',
                   'F3-AVG',
                   'C3-AVG',
                   'P3-AVG',
                   'O1-AVG',
                   'Fp2-AVG',
                   'F4-AVG',
                   'C4-AVG',
                   'P4-AVG',
                   'O2-AVG',
                   'F7-AVG',
                   'T3-AVG',
                   'T5-AVG',
                   'F8-AVG',
                   'T4-AVG',
                   'T6-AVG',
                   'FZ-AVG',
                   'CZ-AVG',
                   'PZ-AVG',
                   'EKG',
                   'Photic'],
 'signal_length_limit': 10000000,
 'signal_mean': wandb: Currently logged in as: ipis-mjkim. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.15.3
wandb: Run data is saved locally in /home/imkbsz/workspace/eeg_analysis/local/hydra/2023-06-01/12-29-08/wandb/run-20230601_122941-6y5zzv9u
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run lunar-plant-20
wandb: ⭐️ View project at https://wandb.ai/ipis-mjkim/noname
wandb: 🚀 View run at https://wandb.ai/ipis-mjkim/noname/runs/6y5zzv9u
